<?php

class interface_func
{
    public static function validParam($param)
    {
        empty($param) && self::setMsg(1000);

        $param = array_filter($param, function($v){
            return !empty($v) ?: self::setMsg(1001);
        });

        //SLog::write('json_encode['.var_export($param['params'], 1).']');
        $tParam = json_encode($param['params'], JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
        //SLog::write('json_encode_str['.$tParam.']');

        $conf = SConfig::getConfig(ROOT_CONFIG.'/interface.conf', 'salt');

        if (empty($conf->$param['u'])) {
            self::setMsg(3001);
        }
        //SLog::write('md5(1)--->['.md5($tParam.$param['time'].$conf->$param['u']).']');
        $tKey = md5(md5($tParam.$param['time'].$conf->$param['u']));
        //SLog::write('md5(2)--->['.$tKey.']');

        if ($param['key'] !== $tKey) {
            SLog::debug('origin[%s],tKey[%s]', var_export($param, 1), $tKey);
            self::setMsg(1002);
        }

        if (!empty($param['token'])) {
            $userInfo = user_api::getToken($param['token']);

            if (!empty($userInfo)) {
                $param['userInfo'] = array(
                    'uid' => $userInfo->uid
                );
            }
        }

        return $param;
    }
    
    public static function setMsg($code = 3000)
    {
        $ret = [
            'code'    => $code,
            'message' => !empty(interface_code::$errCode['en'][$code])
                        ? interface_code::$errCode['en'][$code]
                        : interface_code::$errCode['en'][3000],
            'errMsg' => !empty(interface_code::$errCode['zh'][$code])
                        ? interface_code::$errCode['zh'][$code]
                        : SLanguage::tr(interface_code::$errCode['zh'][3000], 'code')
        ];

        //exit(SJson::encode($ret));
        exit(json_encode($ret, JSON_UNESCAPED_UNICODE));
    }

    public static function setError($code)
    {
        return [
            'code' => $code,
            'message' => !empty(interface_code::$errCode['en'][$code])
                        ? interface_code::$errCode['en'][$code]
                        : interface_code::$errCode['en'][3000]
        ];
    }

    public static function error($code, $msg)
    {
        return [
            'code'   => $code,
            'msg'    => $msg,
            'errMsg' => $msg
        ];
    }

    public static function success($code = 0, $msg ='success')
    {
        return [
            'code' => $code,
            'msg'  => $msg,
        ];
    }

    public static function setData($data)
    {
        $ret = [
            'code'    => 0,
            'message' => 'success',
            'result'    => $data
        ];

        //exit(SJson::encode($ret));
        exit(json_encode($ret, JSON_UNESCAPED_UNICODE));
    }

    public static function imgUrl($fileName)
    {
        if (!$fileName) return '';

        return self::httpHeader() .':'.utility_cdn::file($fileName);
    }

    public static function httpHeader()
    {
        return (isset($_SERVER['HTTPS']) && (strtolower($_SERVER['HTTPS']) == 'on')) ? "https" : "http";
    }

    public static function uidTokenValid($token, $uid)
    {
        $userInfo = user_api::getToken($token);

        if (empty($userInfo->uid) || $userInfo->uid != $uid) {
            return false;
        }

        return true;
    }

    public static function isValidId($idNameArr, $params)
    {
        foreach ($idNameArr as $v) {
            if (!isset($params[$v]) || !intval($params[$v])) {
                self::setMsg(1000);
            }
        }

        return $params;
    }

    public static function requestApi($url, $params=[])
    {
        $data = '';
        if (!empty($params)) {
            (is_object($params) || is_array($params)) && $data = SJson::encode($params);
        }

        $res = SHttp::post(utility_services::url("api", $url),$data,array(),false,5);

        $jsonDecode = SJson::decode($res, true);
        if (defined('DEVELOP')) {
            SLog::debug('[wen_yue_api debug info params[%s],url[%s],result[%s]]', $data, $url, $res);
        }

        if (empty($jsonDecode)) return self::error(2, 'Is not a valid JSON data format');

        if (!empty($jsonDecode['code'])) {
            $msg = '';
            !empty($jsonDecode['zh_msg']) && $msg = $jsonDecode['zh_msg'];
            !empty($jsonDecode['msg']) && $msg = $jsonDecode['msg'];

            return self::error($jsonDecode['code'], $msg);
        } else {
            return $jsonDecode;
        }
    }
}

