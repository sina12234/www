uniform float4x4 ViewProj;
uniform texture2d image;
uniform float4x4 color_matrix;
uniform float3 color_range_min = {0.0, 0.0, 0.0};
uniform float3 color_range_max = {1.0, 1.0, 1.0};

uniform float4 color;
uniform float contrast;
uniform float brightness;
uniform float gamma;
uniform float saturation;
sampler_state textureSampler {
	Filter    = Linear;
	AddressU  = Clamp;
	AddressV  = Clamp;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertData VSDefault(VertData v_in)
{
	VertData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

float4 CalcColor(float4 rgba)
{
	return float4(pow(rgba.rgb, float3(gamma, gamma, gamma)) * contrast + brightness, rgba.a);
}

float4 PSColorFilterRGBA(VertData v_in) : TARGET
{
    float dS;
	float dAlpha;
	float4 rgba = image.Sample(textureSampler, v_in.uv) * color;
	float rgbaMax = max(max(rgba.r,rgba.g),rgba.b);
	float rgbaMin = min(min(rgba.r,rgba.g),rgba.b);
	float dDelta = (rgbaMax-rgbaMin)/255;
    float dValue = (rgbaMax+rgbaMin)/255;
	
	if(0==dDelta)
	return CalcColor(rgba);
	
	float dL = dValue/2;
	if(dL<0.5) dS = dDelta/dValue;
	else dS = dDelta/(2-dValue);
	
	if(saturation>=0)
    {
	  if(saturation+dS>=1) dAlpha = dS;
	  else dAlpha = 1-saturation;
	  dAlpha = 1/dAlpha - 1;
      rgba.r = rgba.r+(rgba.r-dL*255)*dAlpha;
      rgba.g = rgba.g+(rgba.g-dL*255)*dAlpha;
      rgba.b = rgba.b+(rgba.b-dL*255)*dAlpha;
	}
    else
    {
	  dAlpha = saturation;
	  rgba.r = dL*255+(rgba.r-dL*255)*(1+dAlpha);
	  rgba.g = dL*255+(rgba.g-dL*255)*(1+dAlpha);
	  rgba.b = dL*255+(rgba.b-dL*255)*(1+dAlpha);
	}	
	return CalcColor(rgba);
}

float4 PSColorFilterMatrix(VertData v_in) : TARGET
{
	float4 yuv = image.Sample(textureSampler, v_in.uv);
	yuv.xyz = clamp(yuv.xyz, color_range_min, color_range_max);
	float4 rgba = saturate(mul(float4(yuv.xyz, 1.0), color_matrix)) * color;

	return CalcColor(rgba);
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSColorFilterRGBA(v_in);
	}
}

technique DrawMatrix
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSColorFilterMatrix(v_in);
	}
}
